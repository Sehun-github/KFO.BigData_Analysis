/*
 * https://dev.mysql.com/doc/sakila/en/sakila-structure.html
 * sakira db 
 */

USE SAKILA;


/* 
- 샘플 데이터를 이용한 SQL 활용
 */

/* 배우, 나라 테이블 */

DESC ACTOR;

SELECT COUNT(*) FROM ACTOR;
SELECT COUNT(*) FROM FILM;
SELECT COUNT(*) FROM CUSTOMER;
SELECT COUNT(*) FROM STAFF;
SELECT COUNT(*) FROM RENTAL;

SELECT COUNT(*) FROM INVENTORY;


-- 배우 이름 
SELECT 
    UPPER(CONCAT(FIRST_NAME, ' ', LAST_NAME)) '배우'
FROM
    ACTOR;

-- SON으로 끝나는 성을 가진 배우
SELECT 
    *
FROM
    ACTOR
WHERE
    UPPER(LAST_NAME) LIKE '%SON';

-- 배우들이 출연한 영화
SELECT 
    UPPER(CONCAT(FIRST_NAME, ' ', LAST_NAME)) '배우',
    F.TITLE,
    F.RELEASE_YEAR
FROM
    FILM F,
    ACTOR A,
    FILM_ACTOR B
WHERE
    A.ACTOR_ID = B.ACTOR_ID
        AND B.FILM_ID = F.FILM_ID;


-- 성(Last name) 별 배우 숫자
SELECT 
    LAST_NAME, COUNT(*) AS 인원
FROM
    ACTOR
GROUP BY LAST_NAME
ORDER BY 인원 DESC , LAST_NAME;

DESC COUNTRY;
-- 
SELECT COUNTRY_ID, COUNTRY 
FROM COUNTRY 
WHERE COUNTRY IN ('AUSTRALIA', 'GERMANY');


/* staff table*/

SELECT 
    CONCAT(STF.FIRST_NAME, ' ', STF.LAST_NAME) STAFF, 
    ADR.ADDRESS,
    ADR.DISTRICT,
    ADR.POSTAL_CODE,
    ADR.CITY_ID
FROM
    STAFF STF
        LEFT JOIN
    ADDRESS ADR ON STF.ADDRESS_ID = ADR.ADDRESS_ID;

-- 임금
-- 1
SELECT 
    CONCAT(STF.FIRST_NAME, ' ', STF.LAST_NAME) STAFF
FROM STAFF STF;

SELECT 
    SUM(PAY.AMOUNT) PAY
FROM
    PAYMENT PAY;


SELECT 
    CONCAT(STF.FIRST_NAME, ' ', STF.LAST_NAME) STAFF, 
    SUM(PAY.AMOUNT) PAY
FROM
    STAFF STF
        LEFT JOIN
    PAYMENT PAY ON STF.STAFF_ID = PAY.STAFF_ID
WHERE
    MONTH(PAY.PAYMENT_DATE) = 7
        AND YEAR(PAY.PAYMENT_DATE) = 2005
GROUP BY STF.FIRST_NAME , STF.LAST_NAME;


-- 영화별 출연 배우의 수
SELECT 
    FLM.TITLE, COUNT(*) 배우
FROM
    FILM FLM
        INNER JOIN
    FILM_ACTOR FIM_ACT ON FLM.FILM_ID = FIM_ACT.FILM_ID
GROUP BY FLM.TITLE
ORDER BY 배우 DESC;



/* 영화, 등급 테이블 */
-- 서브쿼리
-- 영화 ''에 출연한 배우들
SELECT 
    CONCAT(FIRST_NAME, ' ', LAST_NAME) 배우
FROM
    ACTOR
WHERE
    ACTOR_ID IN (SELECT 
            ACTOR_ID
        FROM
            FILM_ACTOR
        WHERE
            FILM_ID IN (SELECT 
                    FILM_ID
                FROM
                    FILM
                WHERE
                    LOWER(TITLE) = LOWER('HALLOWEEN NUTS')));

-- 국가가 CANADA인 고객의 이름
-- 1. SUBQUERY
SELECT 
    CONCAT(FIRST_NAME, ' ', LAST_NAME) 고객, EMAIL
FROM
    CUSTOMER
WHERE
    ADDRESS_ID IN (SELECT 
            ADDRESS_ID
        FROM
            ADDRESS
        WHERE
            CITY_ID IN (SELECT 
                    CITY_ID
                FROM
                    CITY
                WHERE
                    COUNTRY_ID IN (SELECT 
                            COUNTRY_ID
                        FROM
                            COUNTRY
                        WHERE
                            COUNTRY = 'CANADA')));

-- 국가가 CANADA인 고객의 이름
-- 2. JOIN
SELECT 
    CONCAT(CUS.FIRST_NAME, ' ', CUS.LAST_NAME) 고객, CUS.EMAIL
FROM
    CUSTOMER CUS
        JOIN
    ADDRESS ADR ON CUS.ADDRESS_ID = ADR.ADDRESS_ID
        JOIN
    CITY CIT ON ADR.CITY_ID = CIT.CITY_ID
        JOIN
    COUNTRY COU ON CIT.COUNTRY_ID = COU.COUNTRY_ID
WHERE
    COU.COUNTRY = 'CANADA';





-- 영화 등급
SELECT 
    RATING
FROM
    film
GROUP BY RATING;

-- 영화에서 pg 또는 G 등급
SELECT 
    RATING, COUNT(*) 수량
FROM
    FILM
WHERE
    RATING = 'PG' OR RATING = 'G'
GROUP BY RATING;

SET sql_mode=(SELECT REPLACE(@@sql_mode,'ONLY_FULL_GROUP_BY','')); 
-- 영화에서 pg 또는 G 등급 영화 제목
SELECT 
    RATING, 
    TITLE,
    RELEASE_YEAR
FROM
    FILM
WHERE
    RATING = 'PG' OR RATING = 'G'
GROUP BY RATING;


-- 대여비 관련
-- 대여비가 1 ~ 6 이하
SELECT 
    DISTINCT RENTAL_RATE
FROM FILM;


SELECT 
    TITLE, RATING
FROM
    FILM
WHERE
    RENTAL_RATE > 1.0 AND RENTAL_RATE < 6.0;

--
-- 등급별 영화의 수를 출력

SELECT 
    RATING, COUNT(*)
FROM
    FILM
GROUP BY RATING;

--
-- 대여비가 1 ~ 6 이하인 등급별 영화의 수를 출력

SELECT 
    RATING, COUNT(*)
FROM
    FILM
WHERE
    RENTAL_RATE > 1.0 AND RENTAL_RATE < 6.0;


-- 등급별 영화 수와 합계, 최고, 최소 비용
SELECT RATING, COUNT(*) 수량, 
	   SUM(RENTAL_RATE) 합계,
       AVG(RENTAL_RATE) 평균,
       MIN(RENTAL_RATE) 최소,
       MAX(RENTAL_RATE) 최고
FROM FILM
GROUP BY RATING, RENTAL_RATE;


-- 등급별 영화 수와 합계, 최고, 최소 비용을 조회하고 평균 렌탈 비용으로 정렬
SELECT RATING, COUNT(*) 수량, 
	   SUM(RENTAL_RATE) 합계,
       AVG(RENTAL_RATE) 평균대여비,
       MIN(RENTAL_RATE) 최소,
       MAX(RENTAL_RATE) 최고
FROM FILM
GROUP BY RATING, RENTAL_RATE
ORDER BY AVG(RENTAL_RATE) DESC;

-- 등급별 영화 개수, 등급, 평균렌탈 비용을 출력하고 평균 렌탈비용을 내림차순으로 해서 하자
SELECT RATING,
		COUNT(*) AS 수량,
	   AVG(RENTAL_RATE) AS 평균대여비
FROM FILM
GROUP BY RATING
ORDER BY 평균대여비 DESC;




/* 
   - 샘플 데이터와 집계 테이블 활용
   - Top 5, Top 10, 연도별 집계
 */

SELECT 
    C.CATEGORY_ID, C.NAME
FROM
    FILM_CATEGORY FC,
    CATEGORY C
WHERE
    FC.CATEGORY_ID = C.CATEGORY_ID;


-- 분류가  FAMILY 인 영화 
-- 1. SUBQUERY
SELECT FILM_ID, TITLE, RELEASE_YEAR
FROM FILM
WHERE FILM_ID IN (
	SELECT FILM_ID
	FROM FILM_CATEGORY
	WHERE CATEGORY_ID IN (
		SELECT CATEGORY_ID
		FROM CATEGORY
		WHERE NAME = 'FAMILY'
	)
);

-- 2. JOIN
SELECT F.FILM_ID, F.TITLE, F.RELEASE_YEAR
FROM FILM F
	LEFT JOIN 
    FILM_CATEGORY FC ON F.FILM_ID = FC.FILM_ID
    LEFT JOIN 
    CATEGORY C ON FC.CATEGORY_ID = C.CATEGORY_ID
WHERE C.NAME = 'FAMILY';



-- 영화분류별 영화의 개수: 동등 조인
SELECT C.NAME, COUNT(F.FILM_ID) 수량,
	   SUM(F.RENTAL_RATE) 합계,
       AVG(RENTAL_RATE) 평균,
       MIN(RENTAL_RATE) 최고, 
       MAX(RENTAL_RATE) 최소
FROM FILM F, FILM_CATEGORY FC, CATEGORY C
WHERE FC.CATEGORY_ID = C.CATEGORY_ID
      AND FC.FILM_ID = F.FILM_ID
GROUP BY C.NAME, F.RENTAL_RATE
ORDER BY 평균 DESC;


-- 분류별 영화의 개수: LEFT JOIN
SELECT C.NAME, COUNT(F.FILM_ID) 영화수,
	   SUM(F.RENTAL_RATE) 합계,
       AVG(RENTAL_RATE) 평균,
       MIN(RENTAL_RATE) 최고, 
       MAX(RENTAL_RATE) 최소
FROM FILM F, FILM_CATEGORY FC
JOIN CATEGORY C
ON FC.CATEGORY_ID = C.CATEGORY_ID
WHERE FC.FILM_ID = F.FILM_ID

GROUP BY C.NAME, F.RENTAL_RATE
ORDER BY 평균 DESC;


-- 분류 action 영화의 대표값,  - LEFT JOIN
SELECT C.NAME, COUNT(F.FILM_ID) 영화수,
	   SUM(F.RENTAL_RATE) 합계,
       AVG(RENTAL_RATE) 평균,
       MIN(RENTAL_RATE) 최고, 
       MAX(RENTAL_RATE) 최소
FROM FILM F, FILM_CATEGORY FC
JOIN CATEGORY C
ON FC.CATEGORY_ID = C.CATEGORY_ID
WHERE FC.FILM_ID = F.FILM_ID
GROUP BY C.NAME, F.RENTAL_RATE
HAVING C.NAME = 'Action'
ORDER BY 평균 DESC;


/* 순위 */


-- 레이팅별 랭킹

SELECT TITLE, 
		RANK() OVER(ORDER BY COUNT(TITLE)) AS RANKING,
		DENSE_RANK() OVER(ORDER BY COUNT(TITLE)) AS DENSE,
		ROW_NUMBER() OVER(ORDER BY COUNT(TITLE)) AS ROWNUM
FROM FILM
GROUP BY RATING;

SELECT TITLE, 
		RANK() OVER(PARTITION BY RENTAL_RATE ORDER BY COUNT(TITLE)) AS RANKING,
		DENSE_RANK() OVER(PARTITION BY RENTAL_RATE ORDER BY COUNT(TITLE)) AS RANKING2,
		ROW_NUMBER() OVER(PARTITION BY RENTAL_RATE ORDER BY COUNT(TITLE)) AS RANKING3
FROM FILM
GROUP BY RATING;

SELECT 	RATING, COUNT(*), 
	    SUM(RENTAL_RATE) 합계, AVG(RENTAL_RATE) 평균,
        MIN(RENTAL_RATE) 최고, MAX(RENTAL_RATE) 최소,
		RANK() OVER(PARTITION BY RATING ORDER BY SUM(RENTAL_RATE) DESC) AS RANKING,
		DENSE_RANK() OVER(PARTITION BY RENTAL_RATE ORDER BY COUNT(TITLE)) AS RANKING2,
		ROW_NUMBER() OVER(PARTITION BY RENTAL_RATE ORDER BY COUNT(TITLE)) AS RANKING3
FROM FILM
GROUP BY RATING, RENTAL_RATE
ORDER BY RANKING DESC;



SELECT 	RATING, 
		COUNT(*) 수량, 
	    SUM(RENTAL_RATE) 합계, AVG(RENTAL_RATE) 평균,
        MIN(RENTAL_RATE) 최고, MAX(RENTAL_RATE) 최소,
		RANK() OVER(PARTITION BY RATING ORDER BY SUM(RENTAL_RATE) DESC) AS RANKING,
		DENSE_RANK() OVER(PARTITION BY RENTAL_RATE ORDER BY COUNT(TITLE)) AS RANKING2,
		ROW_NUMBER() OVER(PARTITION BY RENTAL_RATE ORDER BY COUNT(TITLE)) AS RANKING3
FROM FILM
GROUP BY RATING, RENTAL_RATE
ORDER BY RANKING DESC;



-- 가장 대여비가 높은 영화 분류
-- category, film_category, inventory, payment, rental 테이블 사용
SELECT 
    CAT.NAME CATEGORY_NAME, SUM(IFNULL(PAY.AMOUNT, 0)) REVENUE
FROM
    CATEGORY CAT
        LEFT JOIN
    FILM_CATEGORY FLM_CAT ON CAT.CATEGORY_ID = FLM_CAT.CATEGORY_ID
        LEFT JOIN
    FILM FIL ON FLM_CAT.FILM_ID = FIL.FILM_ID
        LEFT JOIN
    INVENTORY INV ON FIL.FILM_ID = INV.FILM_ID
        LEFT JOIN
    RENTAL REN ON INV.INVENTORY_ID = REN.INVENTORY_ID
        LEFT JOIN
    PAYMENT PAY ON REN.RENTAL_ID = PAY.RENTAL_ID
GROUP BY CAT.NAME
ORDER BY REVENUE DESC
LIMIT 5;

-- 뷰 생성
-- 
CREATE OR REPLACE VIEW v_cat_revenue AS
	SELECT 
		CAT.NAME CATEGORY_NAME, SUM(IFNULL(PAY.AMOUNT, 0)) REVENUE
	FROM
		CATEGORY CAT
			LEFT JOIN
		FILM_CATEGORY FLM_CAT ON CAT.CATEGORY_ID = FLM_CAT.CATEGORY_ID
			LEFT JOIN
		FILM FIL ON FLM_CAT.FILM_ID = FIL.FILM_ID
			LEFT JOIN
		INVENTORY INV ON FIL.FILM_ID = INV.FILM_ID
			LEFT JOIN
		RENTAL REN ON INV.INVENTORY_ID = REN.INVENTORY_ID
			LEFT JOIN
		PAYMENT PAY ON REN.RENTAL_ID = PAY.RENTAL_ID
	GROUP BY CAT.NAME
	ORDER BY REVENUE DESC
;

SELECT * FROM v_cat_revenue
LIMIT 10; 
